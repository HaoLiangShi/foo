apply plugin: 'base'
group 'com.haoliang.foo'
version '1.0'

ext {
    junitVersion = '4.11'
    springVersion = '4.2.4.RELEASE'
    springBootVersion = '1.4.1.RELEASE'
    mysqlConnectorVersion = '5.1.37'
    mybatisVersion = '3.3.0'
    mybatisSpringVersion = '1.2.3'
    jacksonVersion = '2.6.4'
    aliyunOSSVersion = '2.1.0'
    lombokVersion = '1.16.12'

    env = System.getProperty("env") == null ? "development" : System.getProperty("env")
}

buildscript {
    ext {
        springBootVersion = '1.4.1.RELEASE'
        nexusUrl = 'http://maven-pdd.corp.yiran.com:8081'
    }

    repositories {
        maven {
            name "company"
            url "$nexusUrl/repository/maven-public/"

        }
        jcenter()
        mavenLocal()
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion")
    }
}

allprojects {

}
subprojects {
    apply plugin: 'idea'
    apply plugin: 'java'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    configurations {
        all*.exclude group: "org.springframework.boot", module: "spring-boot-starter-logging"
    }

    repositories {
        maven {
            name "company"
            url "$nexusUrl/repository/maven-public/"

        }
        jcenter()
        mavenLocal()
    }

    sourceSets {
        main {
            resources {
                srcDirs = ["src/main/resources/base", "src/main/resources/$env"]
            }
        }
        test {
            resources {
                srcDirs = ["src/test/resources/base", "src/main/resources/$env"]
            }
        }
    }

    dependencies {
        compile "org.springframework.boot:spring-boot-starter:$springBootVersion"
        compile "org.springframework.boot:spring-boot-starter-test:$springBootVersion"
        compile "org.springframework.boot:spring-boot-starter-log4j2:$springBootVersion"
        compile "org.springframework:spring-aspects:$springVersion"
        compile "com.fasterxml.jackson.core:jackson-core:$jacksonVersion"
        compile "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"
        compile "com.fasterxml.jackson.core:jackson-annotations:$jacksonVersion"
        compile "org.springframework.boot:spring-boot-starter-validation:$springBootVersion"
        compile "org.springframework:spring-tx:$springVersion"
        compile "org.springframework:spring-jdbc:$springVersion"
        compile "mysql:mysql-connector-java:$mysqlConnectorVersion"
        compile "org.springframework:spring-jms:$springVersion"
        compile "org.projectlombok:lombok:$lombokVersion"
    }
}

project(":foo-api") {
    apply plugin: 'spring-boot'
    dependencies {
        compile project(":foo-core")
        compile project(":foo-common")

        compile "org.springframework.boot:spring-boot-starter-web:$springBootVersion"
        compile "org.springframework.boot:spring-boot-starter-aop:$springBootVersion"
    }
}

project(":foo-core") {
    dependencies {
        compile project(":foo-repository")
        compile project(":foo-common")

        compile "org.mybatis:mybatis:$mybatisVersion"
        compile "org.mybatis:mybatis-spring:$mybatisSpringVersion"
    }
}

project(":foo-repository") {
    dependencies {
        compile project(":foo-common")

        compile "org.mybatis:mybatis:$mybatisVersion"
        compile "org.mybatis:mybatis-spring:$mybatisSpringVersion"
    }
}

project(":foo-common") {
}

project(":foo-task") {
    apply plugin: 'spring-boot'
    dependencies {
        compile project(":foo-common")
        compile project(":foo-core")

        compile "org.mybatis:mybatis:$mybatisVersion"
        compile "org.mybatis:mybatis-spring:$mybatisSpringVersion"
    }
}

configurations.all {
    // check for updates every build
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

// mybatis
configurations {
    mybatisGenerator
}
repositories {
    mavenCentral()
}
dependencies {
    mybatisGenerator 'org.mybatis.generator:mybatis-generator-core:1.3.2'
    mybatisGenerator 'mysql:mysql-connector-java:5.1.36'
    mybatisGenerator 'tk.mybatis:mapper:3.3.2'
}

task mybatisGenerate << {
    ant.taskdef(
            name: 'mbgenerator',
            classname: 'org.mybatis.generator.ant.GeneratorAntTask',
            classpath: configurations.mybatisGenerator.asPath
    )
    ant.mbgenerator(overwrite: true, configfile: 'generatorConfig.xml', verbose: true) {}
}
